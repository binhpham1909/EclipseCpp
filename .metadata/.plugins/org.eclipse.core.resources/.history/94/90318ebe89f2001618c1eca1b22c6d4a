/*
 * SysTime.cpp
 *
 *  Created on: 14 thg 2, 2017
 *      Author: MyPC
 */

#include "SysTime.h"


SysTime::SysTime() {
	// TODO Auto-generated constructor stub
	_syncInterval = 300;
	_sysTime = 0;
	_prevMillis = 0;
	_nextSyncTime = 0;
	_isSetTime = false;
	// Timezone
	_localIndex = ModuleSettings::getInstance()->getTimezone();	// doc cai nay tu EEPROM
	_dst = TimeZone[_localIndex*2];
	_std = TimeZone[_localIndex*2 + 1];
	// NTP time
	_NtpServerName = "pool.ntp.org";
	_packetBuffer = (byte*)malloc(NTP_PACKET_SIZE);
	_lastSync = 0;
}

SysTime::~SysTime() {
	// TODO Auto-generated destructor stub
	if ( _packetBuffer ) free(_packetBuffer);
}

void SysTime::refreshCache(time_t t) {
	if (t != _cacheTime) {
		breakTime(t, _tm);
		_cacheTime = t;
	}
}

int SysTime::hour() { // the hour now
	return hour(now());
}

int SysTime::hour(time_t t) { // the hour for the given time
	refreshCache(t);
	return _tm.Hour;
}

int SysTime::hourFormat12() { // the hour now in 12 hour format
	return hourFormat12(now());
}

int SysTime::hourFormat12(time_t t) { // the hour for the given time in 12 hour format
	refreshCache(t);
	if( _tm.Hour == 0 )
		return 12; // 12 midnight
	else if( _tm.Hour  > 12)
		return _tm.Hour - 12 ;
	else
		return _tm.Hour ;
}

uint8_t SysTime::isAM() { // returns true if time now is AM
	return !isPM(now());
}

uint8_t SysTime::isAM(time_t t) { // returns true if given time is AM
	return !isPM(t);
}

uint8_t SysTime::isPM() { // returns true if PM
	return isPM(now());
}

uint8_t SysTime::isPM(time_t t) { // returns true if PM
	return (hour(t) >= 12);
}

int SysTime::minute() {
	return minute(now());
}

int SysTime::minute(time_t t) { // the minute for the given time
	refreshCache(t);
	return _tm.Minute;
}

int SysTime::second() {
	return second(now());
}

int SysTime::second(time_t t) {  // the second for the given time
	refreshCache(t);
	return _tm.Second;
}

int SysTime::day(){
	return(day(now()));
}

int SysTime::day(time_t t) { // the day for the given time (0-6)
	refreshCache(t);
	return _tm.Day;
}

int SysTime::weekday() {   // Sunday is day 1
	return  weekday(now());
}

int SysTime::weekday(time_t t) {
	refreshCache(t);
	return _tm.Wday;
}

int SysTime::month(){
	return month(now());
}

int SysTime::month(time_t t) {  // the month for the given time
	refreshCache(t);
	return _tm.Month;
}

int SysTime::year() {  // as in Processing, the full four digit year: (2009, 2010 etc)
	return year(now());
}

int SysTime::year(time_t t) { // the year for the given time
	refreshCache(t);
	return tmYearToCalendar(_tm.Year);
}

void SysTime::breakTime(time_t timeInput, tmElements_t &tm){
	// chuyen time_t thanh cac thanh phan thoi gian offset tu 1970 !!!
	uint8_t year;
	uint8_t month, monthLength;
	uint32_t time;
	unsigned long days;

	time = (uint32_t)timeInput;
	tm.Second = time % 60;
	time /= 60; // now it is minutes
	tm.Minute = time % 60;
	time /= 60; // now it is hours
	tm.Hour = time % 24;
	time /= 24; // now it is days
	tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1

	year = 0;
	days = 0;
	while((unsigned)(days += (isLeapYear(year) ? 366 : 365)) <= time) {
		year++;
	}
	tm.Year = year; // year is offset from 1970

	days -= isLeapYear(year) ? 366 : 365;
	time  -= days; // now it is days in this year, starting at 0

	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
		if (month==1) { // february
			if (isLeapYear(year)) {
				monthLength=29;
			} else {
				monthLength=28;
			}
		} else {
			monthLength = monthDays[month];
		}

		if (time >= monthLength) {
			time -= monthLength;
		} else {
			break;
		}
	}
	tm.Month = month + 1;  // jan is month 1
	tm.Day = time + 1;     // day of month
}

char* SysTime::monthStr(uint8_t month) {
	char buffer[dt_MAX_STRING_LEN+1];
    strcpy_P(buffer, (PGM_P)pgm_read_word(&(monthNames_P[month])));
    return buffer;
}

char* SysTime::dayStr(uint8_t day) {
	char buffer[dt_MAX_STRING_LEN+1];
	strcpy_P(buffer, (PGM_P)pgm_read_word(&(dayNames_P[day])));
	return buffer;
}

char* SysTime::monthShortStr(uint8_t month) {
	char buffer[dt_MAX_STRING_LEN+1];
	for (int i=0; i < dt_SHORT_STR_LEN; i++)
		buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));
	buffer[dt_SHORT_STR_LEN] = 0;
	return buffer;
}

char* SysTime::dayShortStr(uint8_t day) {
	char buffer[dt_MAX_STRING_LEN+1];
	uint8_t index = day*dt_SHORT_STR_LEN;
	for (int i=0; i < dt_SHORT_STR_LEN; i++)
	  buffer[i] = pgm_read_byte(&(dayShortNames_P[index + i]));
	buffer[dt_SHORT_STR_LEN] = 0;
	return buffer;
}

time_t SysTime::makeTime(tmElements_t &tm){
// assemble time elements into time_t
// note year argument is offset from 1970 (see macros in time.h to convert to other formats)
// previous version used full four digit year (or digits since 2000),i.e. 2009 was 2009 or 9

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (isLeapYear(i)) {
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && isLeapYear(tm.Year)) {
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds;
}

time_t SysTime::nowLocal() {
	return toLocal(now());
}

time_t SysTime::now() {
	// calculate number of seconds passed since last call to now()
	while (millis() - _prevMillis >= 1000) {
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
		_sysTime++;
		_prevMillis += 1000;
	}
	return (time_t)_sysTime;
}

void SysTime::setTime(time_t t) {
	_sysTime = (uint32_t)t;
	_isSetTime = true;
	_prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
}

void SysTime::setTime(int hr,int min,int sec,int dy, int mnth, int yr){
	// year can be given as full four digit year or two digts (2010 or 10 for 2010);
	//it is converted to years since 1970
	if( yr > 99)
		yr = yr - 1970;
	else
		yr += 30;
	_tm.Year = yr;
	_tm.Month = mnth;
	_tm.Day = dy;
	_tm.Hour = hr;
	_tm.Minute = min;
	_tm.Second = sec;
	setTime(makeTime(_tm));
}

void SysTime::adjustTime(long adjustment) {
	_sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
bool SysTime::isSetTime() {
	now(); // required to actually update the status
	return _isSetTime;
}


bool SysTime::isLeapYear(uint8_t year) {
	return (((1970+year)>0) && !((1970+year)%4) && ( ((1970+year)%100) || !((1970+year)%400)));
}


time_t SysTime::toLocal(time_t utc) {
    //recalculate the time change points if needed
    if (year(utc) != year(_dstUTC)) calcTimeChanges(year(utc));

    if (utcIsDST(utc))
        return utc + _dst.offset * SECS_PER_MIN;
    else
        return utc + _std.offset * SECS_PER_MIN;
}


time_t SysTime::toUTC(time_t local) {
    //recalculate the time change points if needed
    if (year(local) != year(_dstLoc)) calcTimeChanges(year(local));

    if (locIsDST(local))
        return local - _dst.offset * SECS_PER_MIN;
    else
        return local - _std.offset * SECS_PER_MIN;
}

boolean SysTime::utcIsDST(time_t utc) {
    //recalculate the time change points if needed
    if (year(utc) != year(_dstUTC)) calcTimeChanges(year(utc));

    if (_stdUTC > _dstUTC)    //northern hemisphere
        return (utc >= _dstUTC && utc < _stdUTC);
    else                      //southern hemisphere
        return !(utc >= _stdUTC && utc < _dstUTC);
}

boolean SysTime::locIsDST(time_t local) {
    //recalculate the time change points if needed
    if (year(local) != year(_dstLoc)) calcTimeChanges(year(local));

    if (_stdLoc > _dstLoc)    //northern hemisphere
        return (local >= _dstLoc && local < _stdLoc);
    else                      //southern hemisphere
        return !(local >= _stdLoc && local < _dstLoc);
}


void SysTime::calcTimeChanges(int yr) {
    _dstLoc = toTime_t(_dst, yr);
    _stdLoc = toTime_t(_std, yr);
    _dstUTC = _dstLoc - _std.offset * SECS_PER_MIN;
    _stdUTC = _stdLoc - _dst.offset * SECS_PER_MIN;
}

time_t SysTime::toTime_t(TimeChangeRule r, int yr) {
    tmElements_t tm;
    time_t t;
    uint8_t m, w;            //temp copies of r.month and r.week

    m = r.month;
    w = r.week;
    if (w == 0) {            //Last week = 0
        if (++m > 12) {      //for "Last", go to the next month
            m = 1;
            yr++;
        }
        w = 1;               //and treat as first week of next month, subtract 7 days later
    }
    tm.Hour = r.hour;
    tm.Minute = 0;
    tm.Second = 0;
    tm.Day = 1;
    tm.Month = m;
    tm.Year = yr - 1970;
    t = makeTime(tm);        //first day of the month, or first day of next month for "Last" rules
    t += (7 * (w - 1) + (r.dow - weekday(t) + 7) % 7) * SECS_PER_DAY;
    if (r.week == 0) t -= 7 * SECS_PER_DAY;    //back up a week if this is a "Last" rule
    return t;
}
