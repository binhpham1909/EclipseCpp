/*
 * TaskManager.cpp
 *
 *  Created on: 13 thg 2, 2017
 *      Author: MyPC
 */

#include "TaskManager.h"

bool true_condition() {
	return true;
}

TaskManager::TaskManager() {
	// TODO Auto-generated constructor stub
	_isTasksRunning = false;
	_runTask = -1;
	_tasks = new TTask[1];
	_totalTasks = 0;
}

TaskManager::~TaskManager() {
	// TODO Auto-generated destructor stub

}

void TaskManager::addJob(String name, void (*func)(), bool (*conditionFunc)(), TMode mode, time_t time, unsigned long timer, int priority) {
	TTask job;
	strncpy(job.name,name.c_str(),15);
	job.func = func;
	job.conditionFunc = conditionFunc;
	job.mode = Repeat;
	job.timer = timer;
	job.nextTime = millis();
	job.time = now();
	job.priority = priority;
	job.isRun = true;
	DBG2F("Add task: ", name);
	insertJob(job);
}

void TaskManager::addJob(String name, void (*func)(), bool (*conditionFunc)(), unsigned long timer) {
	TTask job;
	strncpy(job.name,name.c_str(),15);
	job.func = func;
	job.conditionFunc = conditionFunc;
	job.mode = Repeat;
	job.timer = timer;
	job.nextTime = millis();
	job.time = now();
	job.priority = 1;
	job.isRun = true;
	DBG2F("Add task: ", name);
	insertJob(job);
}

void TaskManager::addJob(String name, void (*func)(), unsigned long timer) {
	TTask job;
	strncpy(job.name,name.c_str(),15);
	job.func = func;
	job.conditionFunc = true_condition;
	job.mode = Repeat;
	job.timer = timer;
	job.nextTime = millis();
	job.time = now();
	job.priority = 1;
	job.isRun = true;
	DBG2F0("Add task: ", name);
	insertJob(job);
}

void TaskManager::insertJob(TTask& job) {
	_totalTasks++;
	TTask *tasks = new TTask[_totalTasks];
	if (_totalTasks > 1)
		for (long long i = 0; i < _totalTasks - 1; i++){
			tasks[i] = _tasks[i];
		}
	tasks[_totalTasks - 1] = job;
	delete _tasks;
	_tasks = tasks;
	DBGF(".>> done");
}

void TaskManager::startTasks(){
	_runTask = 0;
}

void TaskManager::update() {
	TTask job = _tasks[_runTask];
	unsigned long curr = millis();
	time_t curT = now();
	if(job.isRun){
		DBG2F0("Run task ", _runTask);
		DBG2F(" : ", job.name);
		if((job.mode == Repeat)&&(curr >= job.nextTime)){
			if(job.conditionFunc()){
				job.func();
				job.nextTime = curr + job.timer;
			}
		}else if((job.mode == Timer) && hour(curT)==hour(job.time) && minute(curT)==minute(job.time)){
			if(job.conditionFunc()){
				job.func();
			}
		}
		DBG2F0("Done task ", _runTask);
		DBG2F(" in : ", millis() - curr);
	}
	_runTask++;
}

void TaskManager::pauseTasks() {
	_runTask = -1;
}

void TaskManager::stopTasks() {
	_runTask = -1;
}
