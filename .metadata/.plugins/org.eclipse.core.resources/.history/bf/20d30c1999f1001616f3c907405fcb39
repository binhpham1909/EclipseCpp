/*
 * TimerManager.h
 *
 *  Created on: 10 thg 2, 2017
 *      Author: MyPC
 */

#ifndef TIMERMANAGER_H_
#define TIMERMANAGER_H_

#include "DebugSetting.h"
#include "TimeLib.h"
#include "DNSServer.h"
#include "Singleton.h"


#define MAX_JOBS	50;

typedef enum TimerMode_t { Repeat, Timer} TMode;
typedef struct __attribute__((packed)){
	char name[11];
	TMode mode;
	void (*func)();
	bool (*conditionFunc)();
	int priority;
	unsigned long timer;
	unsigned long nextTime;
	time_t time;
	bool isRun;
} TJob;

class TimerManager : public Singleton<TimerManager>{
public:
	TimerManager();
	virtual ~TimerManager();
	virtual void addJob(char* name, void (*func)(), bool (*conditionFunc)(), TMode mode, time_t time, unsigned long timer = 0, int priority = 1);
	virtual void update();
protected:
	void insertJob(TJob &);
	void sortRunJobs();
private:
	long long _count;
	unsigned long _workTime;
	TJob *_jobs;
	int *_runJobs;
};

#endif /* TIMERMANAGER_H_ */
